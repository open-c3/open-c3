#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib
use strict;
use warnings;
use utf8;
use FindBin qw( $RealBin );
use YAML::XS;
use Encode;
use OPENC3::PP::Pipe;

=head1 SYNOPSIS

 $0
 $0 refresh
 $0 onlyconfig
 $0 regex # example: aws , aws-ec2 , sync-aws-ec2, huawei-ecs$

=cut

my $config = "$RealBin/../conf/config.yml";
exit unless -f $config;

my $conf = eval{ YAML::XS::LoadFile $config };
die "load confg fail: $@" if $@;

my $config_copytreecol = "$RealBin/../conf/config.copytreecol";
$config_copytreecol = "$config_copytreecol.private" if -f "$config_copytreecol.private";

if( -f $config_copytreecol )
{
    my $conf_copytreecol = eval{ YAML::XS::LoadFile $config_copytreecol };
    die "load $config_copytreecol fail: $@" if $@;
    for my $x ( @{$conf->{download}} )
    {
        my $name = $x->{template};
        my $newcopytreecol;

        if( $name =~ /\-volume$/ )
        {
            $newcopytreecol = $conf_copytreecol->{'default-volume'} if $conf_copytreecol->{'default-volume'};
        }
        else
        {
            $newcopytreecol = $conf_copytreecol->{'default'       } if $conf_copytreecol->{'default'       };
        }

        $newcopytreecol = $conf_copytreecol->{$name} if $conf_copytreecol->{$name};
        
        $x->{copytreecol} = [ @$newcopytreecol ] if $newcopytreecol;
    }
}

my $config_defaulttree = "$RealBin/../conf/config.defaulttree";
$config_defaulttree = "$config_defaulttree.private" if -f "$config_defaulttree.private";

if( -f $config_defaulttree )
{
    my $conf_defaulttree = eval{ YAML::XS::LoadFile $config_defaulttree };
    die "load $config_defaulttree fail: $@" if $@;
    for my $x ( @{$conf->{download}} )
    {
        my $name = $x->{template};
        my $newdefaulttree;

        $newdefaulttree = $conf_defaulttree->{'default'}  if $conf_defaulttree->{'default'};
        $newdefaulttree = $conf_defaulttree->{$name    }  if $conf_defaulttree->{$name    };
        
        $x->{defaulttree} = $newdefaulttree if $newdefaulttree;
    }
}

my $runpath = "$RealBin/../run/download";
system "mkdir -p $runpath" unless -d $runpath;

chdir $runpath or die "chdir fail";

my $refresh    = @ARGV && $ARGV[0] eq 'refresh'    ? 1 : 0;
my $onlyconfig = @ARGV && $ARGV[0] eq 'onlyconfig' ? 1 : 0;

if( $conf->{cookie} && $conf->{cookie}{cmd} && ! $refresh )
{
    system $conf->{cookie}{cmd};
}

#system "rm -rf temp; mkdir temp" unless $refresh;

my %sync = map{ $_ => 1 }grep{ $_ ne 'refresh' && $_ ne 'onlyconfig' }@ARGV;

my $pid = $$;

sub download
{
    my ( $type, $subtype, $url, $outline, $filter, $colmap, $util, $ingestionnode, $check, $datatype, $treeinfo, $alias ) = @_;

    my ( $temppath, $distpath ) = ( "sync_temp/$pid/$type/$subtype", "/data/open-c3-data/device/curr/$type/$subtype" );

    system "mkdir -p $temppath" unless -d $temppath;
    system "mkdir -p $distpath" unless -d $distpath;

    if( $url =~ /^fileserver:(\d+):(.+)$/ )
    {
        my ( $treeid, $filename ) = ( $1, $2 );
        my $md5 = `c3mc-base-db-get -t openc3_job_fileserver md5 -f 'projectid=$treeid and name="$filename" and status="available"'`;
        chomp $md5;
        die "md5 err" unless $md5 && $md5 =~ /^[a-z0-9]+$/;
        my $file = "/data/open-c3-data/glusterfs/fileserver/$treeid/$md5";
        die "nofile $file" unless -f $file;
        system "cp '$file' $temppath/data.xlsx" unless $refresh;
    }
    elsif( $url =~ /^cmd:(.+)$/ )
    {
        my $cmd = $1;
        if ( $alias && ref $alias eq 'HASH' )
        {
            $cmd = sprintf "$cmd %s", join ' ', map{ "$_ $alias->{$_}" }keys %$alias;
        }
        die "run cmd: $cmd fail: $!" if OPENC3::PP::Pipe::system( $onlyconfig ? "cp $distpath/data.tsv $temppath/data.tsv" : "$cmd > $temppath/data.tsv" );
    
    }
    else
    {
        system "curl -b cookie '$url' -o            $temppath/data.xlsx" unless $refresh;
    }

    unless( $datatype && $datatype eq 'tsv' )
    {
        system "xlsx2csv -o $temppath/temp.tsv $temppath/data.xlsx";
        system "cat $temppath/temp.tsv | sed '1d' > $temppath/data.tsv";
    }

    my $line = 0;
    if( $check )
    {
        $line = `wc -l $temppath/data.tsv | awk '{print \$1}'`;
        chomp $line;
        die "get line fail" unless defined $line && $line =~ /^\d+$/;
    }

#check col
    if( $check && $check->{col} && $line )
    {
        my $x = `head -n 1 $temppath/data.tsv`;
        chomp $x;
        utf8::decode($x);
        my %title; map{ $title{$_} =1 }split /\t/, $x;
        for my $col ( @{ $check->{col} } )
        {
            die "$type $subtype nofind col $col" unless $title{$col};
        }
    }
#check min
    if( $check && $check->{min} )
    {
        die "$type $subtype chk min err: len=$line min=$check->{min}" unless $line >= $check->{min};
    }

#tagsfilter
    my $title = `head -n 1 $temppath/data.tsv`;
    chomp $title;
    for my $col ( split /\t/, $title )
    {
        if( $col =~ /^tag\.(.+)$/ )
        {
            my $alias = "TAG.$1";
            $alias =~ s#\\\.#.#g;
            push @$filter, +{ alias => Encode::decode('utf8', $alias ), name => Encode::decode('utf8', $col ) };
        }
    }

    eval{ YAML::XS::DumpFile "$temppath/outline.yml", $outline; };
    eval{ YAML::XS::DumpFile "$temppath/filter.yml",   $filter; };
    eval{ YAML::XS::DumpFile "$temppath/colmap.yml",   $colmap; };
    eval{ YAML::XS::DumpFile "$temppath/alias.yml",     $alias; };
    eval{ YAML::XS::DumpFile "$temppath/util.yml",       $util; };

    system "mv $temppath/data.tsv    $distpath/";
    system "mv $temppath/outline.yml $distpath/";
    system "mv $temppath/filter.yml  $distpath/";
    system "mv $temppath/colmap.yml  $distpath/";
    system "mv $temppath/alias.yml   $distpath/";
    system "mv $temppath/util.yml    $distpath/";

    if( $ingestionnode )
    {
        eval{ YAML::XS::DumpFile "$temppath/ingestion-node.yml", $ingestionnode; };
        system "mv $temppath/ingestion-node.yml  $distpath/";
    }
    else
    {
        system "rm '$distpath/ingestion-node.yml'" if -f "$distpath/ingestion-node.yml";
    }

    if( $treeinfo )
    {
        eval{ YAML::XS::DumpFile "$temppath/treeinfo.yml", $treeinfo; };
        system "mv $temppath/treeinfo.yml  $distpath/";
    }
    else
    {
        system "rm '$distpath/treeinfo.yml'" if -f "$distpath/treeinfo.yml";
    }

}

for my $c ( @{ $conf->{download} } )
{
    next if %sync && ! grep{ $c->{template} =~ /$_/ } keys %sync;

    if( $c->{template} )
    {
        my $tpl = eval{ YAML::XS::LoadFile "$RealBin/../conf/template/$c->{template}.yml"; };
        die "load template $c->{template} fail: $@" if $@;

        die "template $c->{template} error"
          unless $tpl->{download}
              && ref $tpl->{download} eq 'ARRAY'
              && @{$tpl->{download} }
              && ref $tpl->{download}[0] eq 'HASH';

        $c = { %{ $tpl->{download}[0] }, %$c };
    }

    map{ $c->{util}{$_} = $c->{$_} if $c->{$_} }qw( defaulttree copytreecol extcol );
    my $time = time;
    eval{
        download( map{ $c->{$_} }qw(type subtype url outline filter colmap util ingestion-node check datatype treeinfo alias ));
    };
    my $usetime = time - $time;
    if( $@ )
    {
        warn "sync type:$c->{type} subtype:$c->{subtype} fail: $@";
        $usetime = -1;
    }
    printf "c3_cmdb_sync_usetime{type=\"%s\", subtype=\"%s\"} %s\n", $c->{type}, $c->{subtype}, $usetime;
    system "rm -rf 'sync_temp/$pid'";
}
