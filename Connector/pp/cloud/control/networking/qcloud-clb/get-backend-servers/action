#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess

from tencentcloud.common import credential
from tencentcloud.common.profile.client_profile import ClientProfile
from tencentcloud.common.profile.http_profile import HttpProfile
from tencentcloud.clb.v20180317 import clb_client, models


class ClbBackendServers:
    def __init__(self, access_id, access_key, region, data):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.data = data
        self.client = self.create_client()

    def create_client(self):
        cred = credential.Credential(
            self.access_id, self.access_key)
        httpProfile = HttpProfile()
        httpProfile.endpoint = "clb.tencentcloudapi.com"

        clientProfile = ClientProfile()
        clientProfile.httpProfile = httpProfile
        return clb_client.ClbClient(cred, self.region, clientProfile)

    def describe_target(self, load_balancer_id):
        req = models.DescribeTargetsRequest()
        params = {
            "LoadBalancerId": load_balancer_id
        }
        req.from_json_string(json.dumps(params))
        return self.client.DescribeTargets(req)

    # 查询腾讯云传统型负载均衡器的后端服务器列表
    def describe_classic_target(self, load_balancer_id):
        req = models.DescribeClassicalLBTargetsRequest()
        params = {
            "LoadBalancerId": load_balancer_id
        }
        req.from_json_string(json.dumps(params))
        return self.client.DescribeClassicalLBTargets(req)

    def get_backend_server_info(self):
        id_field_name = subprocess.getoutput(
            "c3mc-cloud-get-real-field networking qcloud-clb LoadBalancerId ")
        forward_field_name = subprocess.getoutput(
            "c3mc-cloud-get-real-field networking qcloud-clb Forward ")

        result = []
        m = {}
        if self.data[forward_field_name] == "0":
            target_info = self.describe_classic_target(self.data[id_field_name])
            for target in target_info.Targets:
                if target.InstanceId in m:
                    continue
                m[target.InstanceId] = {}
                result.append(target)
        else:
            target_info = self.describe_target(self.data[id_field_name])
            for listener in target_info.Listeners:
                for rule in listener.Rules:
                    for target in rule.Targets:
                        if target.InstanceId in m:
                            continue
                        m[target.InstanceId] = {}
                        result.append(target)

        return result

    def show(self):
        result = self.get_backend_server_info()
        print(result)


def main(access_id, access_key, region, data):
    ClbBackendServers(access_id, access_key, region, data).show()


if __name__ == '__main__':
    l = []
    for line in sys.stdin:
        l.append(line)
    if len(l) == 0 or len(l) > 1:
        raise Exception("数据格式错误, 需要一行json数据")

    main(sys.argv[2], sys.argv[3], sys.argv[4], json.loads(l[0]))
