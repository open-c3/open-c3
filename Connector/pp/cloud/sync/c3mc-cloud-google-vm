#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json


class VM:
    def __init__(self, cred_json_path, region):
        self.cred_json_path = cred_json_path
        self.region = region
        self.lib_client = self.create_lib_client()

    def create_lib_client(self):
        sys.path.append("/data/Software/mydan/Connector/lib/pp")
        from c3mc_cloud_google_compute import GoogleCompute
        return GoogleCompute(self.cred_json_path)

    def list_instance(self):
        instance_list = self.lib_client.list_region_instances(self.region)
        result = []
        for instance in instance_list:
            network_config = instance["networkInterfaces"][0]
            vpc_network_url = network_config['network']
            instance["vpcName"] = vpc_network_url.rsplit('/', 1)[-1]

            disk_source = next(
                (
                    disk_item["source"]
                    for disk_item in instance["disks"]
                    if disk_item["boot"] == True
                ),
                None,
            )
            instance["os"] = self.lib_client.get_os(disk_source)

            instance["zone"] = instance["zone"].split("/")[-1]
            instance["regionId"] = instance["zone"].split("/")[-1][:-2]
            instance["metadata"].pop("items", None)
            instance["projectId"] = self.lib_client.get_project_id()
            instance.pop("tags", None)

            private_ip = None
            public_ip = None
            for netInterface in instance["networkInterfaces"]:
                private_ip = netInterface["networkIP"]

                if "accessConfigs" in netInterface:
                    for configItem in netInterface["accessConfigs"]:
                        if "natIP" in configItem:
                            public_ip = configItem["natIP"]
            if private_ip is not None:
                instance["private_ip"] = private_ip
            if public_ip is not None:
                instance["public_ip"] = public_ip

            instance["tags_list"] = []
            if "labels" in instance:
                for key, value in instance["labels"].items():
                    instance["tags_list"].append({
                        "Key": key,
                        "Value": value
                    })
            
            # projectId的值全球唯一，id不唯一，拼在一起形成自定义的实例id
            instance["customInstanceId"] = f"{instance['projectId']}-{instance['id']}"

            result.append(instance)
        return result

    def show(self):
        instance_list = self.list_instance()
        for instance in instance_list:
            print(json.dumps(instance))


def main(cred_json_path, region):
    VM(cred_json_path, region).show()


if __name__ == '__main__':
    main(sys.argv[1], sys.argv[2])
