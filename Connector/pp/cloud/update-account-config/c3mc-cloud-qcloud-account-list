#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import os

from tencentcloud.common import credential
from tencentcloud.common.profile.client_profile import ClientProfile
from tencentcloud.common.profile.http_profile import HttpProfile
from tencentcloud.cvm.v20170312 import cvm_client, models


class Qcloud:
    def __init__(self, account, access_id, access_key, cloud_account_id):
        self.account = account
        self.access_id = access_id
        self.access_key = access_key
        self.cloud_account_id = cloud_account_id

    def append_to_file(self, file_path, strings_list):
        if not os.path.exists(file_path):
            open(file_path, "w").close()

        with open(file_path, 'a') as file:
            for line in strings_list:
                file.write(line + '\n')

    def list_cvm_regions(self):
        cred = credential.Credential(self.access_id, self.access_key)
        httpProfile = HttpProfile()
        httpProfile.endpoint = "cvm.tencentcloudapi.com"

        clientProfile = ClientProfile()
        clientProfile.httpProfile = httpProfile
        client = cvm_client.CvmClient(cred, "", clientProfile)

        req = models.DescribeRegionsRequest()
        params = {}
        req.from_json_string(json.dumps(params))

        resp = client.DescribeRegions(req)

        result = []
        for item in json.loads(resp.to_json_string())["RegionSet"]:
            if item["RegionState"] == "AVAILABLE":
                result.append(item["Region"])
        return sorted(result)

    def display(self):
        regions = self.list_cvm_regions()
        account_lines = []
        for region in regions:
            account_lines.append("{} {} {} {} {}".format(self.account, self.access_id, self.access_key, region, self.cloud_account_id))
        self.append_to_file("/data/Software/mydan/AGENT/device/conf/account/.tmp/qcloud.cvm", account_lines)
        self.append_to_file("/data/Software/mydan/AGENT/device/conf/account/.tmp/qcloud.cdb", account_lines)
        self.append_to_file("/data/Software/mydan/AGENT/device/conf/account/.tmp/qcloud.ckafka", account_lines)
        self.append_to_file("/data/Software/mydan/AGENT/device/conf/account/.tmp/qcloud.clb", account_lines)
        self.append_to_file("/data/Software/mydan/AGENT/device/conf/account/.tmp/qcloud.cos", account_lines)
        self.append_to_file("/data/Software/mydan/AGENT/device/conf/account/.tmp/qcloud.cvm-volume", account_lines)
        self.append_to_file("/data/Software/mydan/AGENT/device/conf/account/.tmp/qcloud.mongodb", account_lines)
        self.append_to_file("/data/Software/mydan/AGENT/device/conf/account/.tmp/qcloud.redis", account_lines)
        self.append_to_file("/data/Software/mydan/AGENT/device/conf/account/.tmp/qcloud.sqlserver", account_lines)
        self.append_to_file("/data/Software/mydan/AGENT/device/conf/account/.tmp/qcloud.subnet", account_lines)
        self.append_to_file("/data/Software/mydan/AGENT/device/conf/account/.tmp/qcloud.vpc", account_lines)


def main(account, access_id, access_key, cloud_account_id):
    Qcloud(account, access_id, access_key, cloud_account_id).display()


if __name__ == '__main__':
    main(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4])
