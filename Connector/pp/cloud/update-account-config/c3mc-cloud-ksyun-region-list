#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import requests
from bs4 import BeautifulSoup

from kscore.session import get_session


class Ksyun:
    def __init__(self, access_id, access_key, resource_type):
        self.access_id = access_id
        self.access_key = access_key
        self.resource_type = resource_type

    def list_kec_regions(self):
        s = get_session()
        client = s.create_client(
            "kec", ks_access_key_id=self.access_id, ks_secret_access_key=self.access_key, region_name="cn-beijing-6")

        try:
            response = client.describe_regions()
        except Exception as e:
            raise RuntimeError(
                f"拉取区域列表出错, ak: {self.access_id}, resource_type: {self.resource_type}"
            ) from e

        result = [item["Region"] for item in response["RegionSet"]]
        return sorted(result)
    
    def list_redis_regions(self):
        """查询redis资源支持的区域代码列表
        """
        url = "https://docs.ksyun.com/documents/6000"
        response = requests.get(url)
        content = response.content
        soup = BeautifulSoup(content, "html.parser")

        tables = soup.find_all("table")

        region_codes = []

        for table in tables:
            header_cells = table.find_all("th")

            has_region_code = any(
                header_cell.text.strip() == "地域及代码" for header_cell in header_cells
            )
            if has_region_code:
                rows = table.find_all("tr")

                for row in rows:
                    cells = row.find_all("td")
                    if cells:
                        region_code = cells[0].text.strip()
                        region_codes.append(region_code)

        return [item.split()[-1] for item in region_codes]

    def display(self):
        regions = []
        if self.resource_type == "redis":
            regions = self.list_redis_regions()
        else:
            regions = self.list_kec_regions()

        for region in regions:
            print(region)


def main(access_id, access_key, resource_type):
    Ksyun(access_id, access_key, resource_type).display()


if __name__ == '__main__':
    main(sys.argv[1], sys.argv[2], sys.argv[-1])
