#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess
import re
import base64
import os


def replace_base64_substring(long_string):
    base64_regex = r'base64__\s*([\s\S]*?)__base64'
    matches = re.findall(base64_regex, long_string)

    for match in matches:
        base64_string = match
        decoded_bytes = base64.b64decode(base64_string)
        decoded_string = decoded_bytes.decode('utf-8')
        string_with_colon = f': {decoded_string}'
        long_string = long_string.replace(f'base64__{match}__base64', string_with_colon)

    return long_string


def create_tt(params):
    content = params["content"]

    content = replace_base64_substring(content)

    submit_user = params['submit_user'] if 'submit_user' in params else "sys@app"
    ext_tt = subprocess.getoutput("c3mc-sys-ctl sys.bpm.tt.type")

    resp = subprocess.run([
            "c3mc-create-ticket", 
            "--submit_user", submit_user, 
            "--apply_user", params["apply_user"], 
            "--title", params["title"], 
            "--ext_tt", ext_tt,
        ], 
        input=content.encode(), 
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )
    if resp.returncode != 0:
        err = resp.stderr.decode('utf-8').rstrip()
        print(f"LOG. 创建tt出错: {err}", file=sys.stderr)
        exit(1)

    tt_number = resp.stdout.decode('utf-8').rstrip()

    print(f"LOG. tt单号: {tt_number}", flush=True)

    notify = params.get("notify")
    if not notify:
        notify = "@bpm_notify"

    os.system( "echo 有工单需要处理, [ " + params["title"]  + " ] $(c3mc-sys-ctl sys.c3webaddr)/tt/#/tt/show/" + tt_number + "|c3mc-base-sendmesg $(c3mc-app-usrext bpm_notify @bpm_notify " + notify + "|xargs -n 10000)" )

    resp = subprocess.run([
        "c3mc-wait-ticket-status-change",
        "--number", tt_number,
        "--ext_tt", ext_tt,
        ], 
        input=content.encode(), 
        stdout=subprocess.PIPE,
    )
    if resp.returncode != 0:
        err = resp.stderr.decode('utf-8').rstrip()
        print(f"LOG. 等待tt结束出错: {err}")
        exit(1)

    tt_status_txt = resp.stdout.decode('utf-8').rstrip()
    print(f"LOG. tt结束, 单号: {tt_number}, 状态: {tt_status_txt}")


def main(params):
    create_tt(params)
    

if __name__ == '__main__':
    l = list(sys.stdin)
    if not l or len(l) > 1:
        raise type('WrongInputData', (Exception,), {})('数据格式不对, 需要一行json字符串"')
    
    main(json.loads(l[0]))
