#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess
import requests


def mount_tree(params):
    tree_path = params["tree_path"]
    instance_ids = params["instance_ids"]
    instance_type = params["type"]
    instance_subtype = params["subtype"]
    type_code = params["type_code"]
    extinstance_ids = params["extinstance_ids"]

    api_endpoint = subprocess.getoutput("c3mc-sys-ctl sys.mms.external_api_endpoint")
    appname = subprocess.getoutput("c3mc-sys-ctl sys.mms.external_api_endpoint.env.appname")
    appkey = subprocess.getoutput("c3mc-sys-ctl sys.mms.external_api_endpoint.env.appkey")

    ext_info_m = {}
    for item in extinstance_ids.split(","):
        parts = item.split(".")
        ext_info_m[parts[2]] = {
            "account": parts[0],
            "region": parts[1],
        }

    print(f"需要挂树的资源id列表: {instance_ids}")
    for instance_id in instance_ids.split(","):
        # 内部挂树
        cmd = [
            "c3mc-base-db-ins",
            "--table", "openc3_device_bindtree",
            "type", instance_type,
            "subtype", instance_subtype,
            "uuid", instance_id,
            "tree", tree_path,
        ]
        print(f'挂树命令为: {"".join(cmd)}')

        resp = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if resp.returncode != 0:
            err = resp.stderr.decode('utf-8').rstrip()
            print(f"内部挂树失败, instance_id: {instance_id}, tree_path: {tree_path}, err: {err}", file=sys.stderr)

        # 外部挂树
        if api_endpoint != "":
            header = {
                "Content-Type": "application/json",
            }
            if appname != "" and appkey != "":
                header["appname"] = appname
                header["appkey"] = appkey

            data = {
                "tree_tag": tree_path,
                "uuid": instance_id,
                "type_code": type_code,
                "account_name": ext_info_m[instance_id]["account"],
                "region_name": ext_info_m[instance_id]["region"],
            }

            resp = requests.post(url = api_endpoint, headers = header, json=data)
            resp = resp.json()
            if resp["code"] == 400:
                print("外部挂树失败, instance_id: {}, tree_path: {}, err: {}".format(instance_id, tree_path, resp["msg"]), file=sys.stderr)


def main(params):
    mount_tree(params)


if __name__ == '__main__':
    l = []
    for line in sys.stdin:
        l.append(line)
    if len(l) == 0 or len(l) > 1:
        raise Exception("数据格式不对, 需要一行json字符串")

    main(json.loads(l[0]))
