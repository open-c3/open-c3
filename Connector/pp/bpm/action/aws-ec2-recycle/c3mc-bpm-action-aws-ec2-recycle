#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess

import boto3


supported_recycle_types = [
    "stop",
    "terminate"
]


class Ec2Recycle:
    def __init__(self, access_id, access_key, region):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.client = self.create_client()

    def create_client(self):
        client = boto3.client(
            "ec2",
            aws_access_key_id=self.access_id,
            aws_secret_access_key=self.access_key,
            region_name=self.region,
        )
        return client

    def run(self, recycle_type, instance_id):
        # 停止实例
        if recycle_type.lower() == "stop":
            self.client.stop_instances(
                InstanceIds=[instance_id]
            )

        # 删除实例
        else:
            sys.path.append("/data/Software/mydan/Connector/lib/pp")
            from c3mc_cloud_aws_ec2 import LIB_EC2
            lib_ec2 = LIB_EC2(self.access_id, self.access_key, self.region)
            eip_info_list = lib_ec2.describe_addresses(Filters=[
                {
                    'Name': 'instance-id',
                    'Values': [
                        instance_id,
                    ]
                }
            ])["Addresses"]
            for eip_info in eip_info_list:
                # 先解绑eip再释放eip
                lib_ec2.disassociate_address(eip_info["AssociationId"])
                lib_ec2.release_address(eip_info["AllocationId"])

            self.client.terminate_instances(InstanceIds=[instance_id])


def get_instance_uuid(instance_maybe_identifier):
    command = f"c3mc-device-find-uuid {instance_maybe_identifier}"
    result = subprocess.check_output(command, shell=True)
    return result.decode("utf-8").strip()


def main(params):
    print("params = ", json.dumps(params))

    recycle_type = params["recycle_type"]

    if recycle_type not in supported_recycle_types:
        raise type('UnsupporedRecycleType', (Exception,), {})(
            f'recycle_type: {recycle_type}')

    field_name_list = subprocess.getoutput(
        "c3mc-cloud-get-real-field compute aws-ec2 InstanceId account RegionId"
    ).split()

    for instance_identifier in params["instance_ids"].split(","):
        instance_identifier = instance_identifier.strip()
        if instance_identifier == "":
            continue

        instance_real_uuid = get_instance_uuid(instance_identifier)
        resource_info = json.loads(
            subprocess.getoutput(
                f"c3mc-device-cat curr compute aws-ec2 {instance_real_uuid} | c3mc-base-tab2json"
            )
        )

        key_info = json.loads(subprocess.getoutput(
            f"c3mc-get-account-info aws {resource_info[field_name_list[1]]}"))

        Ec2Recycle(key_info["access_id"], key_info["access_key"], resource_info[field_name_list[2]]) \
            .run(recycle_type, resource_info[field_name_list[0]])


if __name__ == '__main__':
    l = list(sys.stdin)
    if not l or len(l) > 1:
        raise type('WrongInputData', (Exception,), {})('数据格式不对, 需要一行json字符串"')

    main(json.loads(l[0]))
