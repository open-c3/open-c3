#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess

from tencentcloud.common import credential
from tencentcloud.common.profile.client_profile import ClientProfile
from tencentcloud.common.profile.http_profile import HttpProfile
from tencentcloud.cvm.v20170312 import cvm_client

sys.path.append("/data/Software/mydan/Connector/lib/pp")

supported_recycle_types = [
    "stop",
    "terminate"
]


class CvmRecycle:
    def __init__(self, access_id, access_key, region):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.client = self.create_client()

    def create_client(self):
        cred = credential.Credential(self.access_id, self.access_key)
        httpProfile = HttpProfile()
        httpProfile.endpoint = "cvm.tencentcloudapi.com"

        clientProfile = ClientProfile()
        clientProfile.httpProfile = httpProfile
        return cvm_client.CvmClient(cred, self.region, clientProfile)

    def run(self, recycle_type, instance_identifier, delete_disk_snapshot):
        from c3mc_cloud_qcloud_cvm import Cvm
        # 停止实例
        if recycle_type.lower() == "stop":
            lib_cvm = Cvm(self.access_id, self.access_key, self.region)
            lib_cvm.stop_instances(instance_identifier)

        # 删除实例
        else:
            lib_cvm = Cvm(self.access_id, self.access_key, self.region)
            lib_cvm.terminate_instances(
                instance_identifier, delete_disk_snapshot)


def main(params):
    print("params = ", json.dumps(params))

    recycle_type = params["recycle_type"]
    delete_disk_snapshot = 1 if params["delete_disk_snapshot"] == "是" else 0

    if recycle_type not in supported_recycle_types:
        raise type('UnsupporedRecycleType', (Exception,), {})(
            f'recycle_type: {recycle_type}')

    field_name_list = subprocess.getoutput(
        "c3mc-cloud-get-real-field compute qcloud-cvm InstanceId account RegionId"
    ).split()

    for instance_identifier in params["instance_ids"].split(","):
        instance_identifier = instance_identifier.strip()
        if instance_identifier == "":
            continue

        query_cmd = f"c3mc-device-cat curr compute qcloud-cvm {instance_identifier} | c3mc-base-tab2json"
        print(f"实例信息, uuid: {instance_identifier}, 查询命令: {query_cmd}")
        resource_info_str = subprocess.getoutput(query_cmd)

        resource_info = json.loads(resource_info_str.split("\n")[0])

        key_info = json.loads(subprocess.getoutput(
            f"c3mc-get-account-info qcloud {resource_info[field_name_list[1]]}"))

        CvmRecycle(key_info["access_id"], key_info["access_key"], resource_info[field_name_list[2]]) \
            .run(recycle_type, resource_info[field_name_list[0]], delete_disk_snapshot)


if __name__ == '__main__':
    l = list(sys.stdin)
    if not l or len(l) > 1:
        raise type('WrongInputData', (Exception,), {})('数据格式不对, 需要一行json字符串"')

    main(json.loads(l[0]))
