#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import re
import subprocess
import threading


def is_valid_email(email):
    """
    检查邮箱格式是否合法
    """
    email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(email_regex, email))


def extract_ips(text):
    pattern = r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b'

    matches = re.findall(pattern, text)

    valid_ips = []
    for ip in matches:
        octets = ip.split('.')
        if len(octets) == 4 and all(0 <= int(octet) <= 255 for octet in octets):
            valid_ips.append(ip)

    return valid_ips


def send_new_user_email(email, password):
    cmd_parts = ["c3mc-base-db-get", "value",  "--table", "openc3_job_environment",
                 "--filter", '`key`="bpmjumpserverTemplateEmailTitle"']
    output = subprocess.run(cmd_parts, capture_output=True, text=True)
    if output.returncode != 0:
        print(output.stderr, file=sys.stderr)
        exit(1)
    title = output.stdout

    cmd_parts = ["c3mc-base-db-get", "value",  "--table", "openc3_job_environment",
                 "--filter", '`key`="bpmjumpserverTemplateEmailContent"']
    output = subprocess.run(cmd_parts, capture_output=True, text=True)
    if output.returncode != 0:
        print(output.stderr, file=sys.stderr)
        exit(1)
    content = output.stdout.format(password)

    resp = subprocess.run([
        "c3mc-base-sendmail",
        email,
        "--subject", title,
    ],
        input=content.encode(),
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )
    if resp.returncode != 0:
        err = resp.stderr.decode('utf-8').rstrip()
        print(f"发送邮件出错: {err}")
        exit(1)


def create_user_if_need(account, email):
    """
    创建堡垒机用户
    """
    cmd_parts = ["c3mc-bl-create-user",
                 "--username", account, "--email", email]
    output = subprocess.run(cmd_parts, capture_output=True, text=True)
    if output.returncode != 0:
        print(output.stderr, file=sys.stderr)
        exit(1)
    create_user_resp = json.loads(output.stdout)
    if create_user_resp["stat"] == 0:
        print(
            f'堡垒机用户创建失败. info: "{create_user_resp["info"].strip()}"', file=sys.stderr)
        exit(1)

    if create_user_resp["stat"] == 1 and create_user_resp["data"].strip() != "":
        return create_user_resp["data"].strip()
    return ""


# 专门针对单个ip添加权限的线程处理函数
def process_element(index, results, ip, grant_auth_type, account, email, grant_sudo_hours):
    cmd_parts = ["c3mc-bl-permission", "--add_type",
                 str(grant_auth_type), "--username", account, "--email", email, "--ip", ip, "--sudo_hours", str(grant_sudo_hours)]

    output = subprocess.run(cmd_parts, capture_output=True, text=True)
    if output.returncode == 0:
        results[index] = ip
        print(f"LOG. 服务器 {ip} 权限申请成功")


def grant_server_auth(account, email, ip_list, grant_auth_type, grant_sudo_hours):
    # 添加目标服务器的权限
    cmd_parts = ["c3mc-device-api-jumpserver",
                 "--json", "--cache", "--ips", ",".join(ip_list)]
    output = subprocess.run(cmd_parts, capture_output=True, text=True)
    if output.returncode != 0:
        print(output.stderr, file=sys.stderr)
        exit(1)

    # 记录从c3mc-device-api-jumpserver查出的机器的内外网ip
    m = {}

    data_list = json.loads(output.stdout)

    for data in data_list:
        m[data["inIP"].strip()] = data["exIP"].strip()
        m[data["exIP"].strip()] = data["inIP"].strip()

    # 线程池
    thread_pool = []
    # 结果数组, 里面存放成功添加权限的ip
    results = [None] * len(m)

    index = 0
    for ip in m:
        if ip == "":
            continue

        t = threading.Thread(target=process_element, args=(
            index, results, ip, grant_auth_type, account, email, grant_sudo_hours
        ), name=f"Thread-{ip}")
        thread_pool.append(t)
        t.start()

        index += 1

    # 等待所有线程运行完毕
    for t in thread_pool:
        t.join()

    # 判断是否有ip从c3中无法查到
    for ip in ip_list:
        if ip not in m:
            print(f"LOG. 服务器 {ip} 权限申请失败。原因: ip在c3中无法找到", file=sys.stderr)
            exit(1)

    for ip in results:
        # 删除ip时会删除关联ip
        if ip is None or ip not in m:
            continue
        related_ip = m[ip]
        del m[ip]
        del m[related_ip]

    for ip in m:
        print(f"LOG. 服务器 {ip} 权限申请失败。", file=sys.stderr)
    if m:
        exit(1)


def main(params):
    email = params["email"]
    auth_type = params["auth_type"]
    ip_list = extract_ips(params["ip_list"])
    sudo_hours = int(auth_type.split("_")[1])
    # add_type 参数取值说明
    # 1: 添加普通权限; 2: 删除权限; 3: 添加sudo权限; 4: 删除sudo权限(保留账户)
    add_type = 3 if sudo_hours > 0 else 1

    account = email.split("@")[0]

    if not is_valid_email(email):
        print("账号不是合法邮箱格式", file=sys.stderr)
        exit(1)

    # 创建堡垒机用户
    new_user_pass = create_user_if_need(account, email)
    if isinstance(new_user_pass, str) and len(new_user_pass) > 0:
        # 发送邮件
        send_new_user_email(email, new_user_pass)
    
    # 添加服务器权限
    grant_server_auth(account, email, ip_list, add_type, sudo_hours)

    print("LOG. 权限添加结束")


if __name__ == '__main__':
    l = list(sys.stdin)
    if not l or len(l) > 1:
        raise Exception("数据格式不对, 需要一行json字符串")

    main(json.loads(l[0]))
