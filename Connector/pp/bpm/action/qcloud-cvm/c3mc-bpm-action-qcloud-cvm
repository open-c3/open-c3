#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess

from tencentcloud.common import credential
from tencentcloud.common.profile.client_profile import ClientProfile
from tencentcloud.common.profile.http_profile import HttpProfile
from tencentcloud.cvm.v20170312 import cvm_client, models


class Cvm:
    def __init__(self, access_id, access_key, region, params):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.params = params
        self.client = self.create_client()

    def create_client(self):
        cred = credential.Credential(
            self.access_id, self.access_key)
        httpProfile = HttpProfile()
        httpProfile.endpoint = "cvm.tencentcloudapi.com"

        clientProfile = ClientProfile()
        clientProfile.httpProfile = httpProfile
        return cvm_client.CvmClient(cred, self.region, clientProfile)
    
    def get_request(self):
        req = models.RunInstancesRequest()
        api_params = {
            "InstanceChargeType": self.params["instance_charge_type"],
            "Placement": {
                "Zone": self.params["zone"],
                "ProjectId": int(self.params["project_id"])
            },
            "InstanceType": self.params["instance_config"],
            "ImageId": self.params["image_id"],
            "SystemDisk": {
                "DiskType": self.params["system_disk_type"],
                "DiskSize": int(self.params["system_disk_size"])
            },
            "VirtualPrivateCloud": {
                "VpcId": self.params["vpc_id"],
                "SubnetId": self.params["subnet_id"]
            },
            "InternetAccessible": {
                "InternetChargeType": self.params["internet_charge_type"]
            },
            "InstanceCount": 1,
            "InstanceName": self.params["instance_name"],
            "SecurityGroupIds": self.params["security_group_ids"].split(",")
        }

        if "internet_max_bandwidth_out" in self.params:
            api_params["InternetAccessible"]["InternetMaxBandwidthOut"] = int(self.params["internet_max_bandwidth_out"])

        # 包年包月时，需要配置购买时长和自动续费方式
        if api_params["InstanceChargeType"] == "PREPAID":
            api_params["InstanceChargePrepaid"] = {
                "Period": int(self.params["instance_charge_count"]),
                "RenewFlag": self.params["renew_flag"]
            }

        if self.params["if_need_data_volume"] == "是":
            api_params["DataDisks"] = [
                {
                    "DiskType": self.params["data_disk_type"],
                    "DiskSize": int(self.params["data_disk_size"])
                }
            ]

        if "tag" in self.params:
            tag_list = json.loads(self.params["tag"])
            if len(tag_list) > 0:
                api_params["TagSpecification"] = [
                    {
                        "ResourceType": "instance",
                        "Tags": []
                    }
                ]
                for tag in tag_list:
                    api_params["TagSpecification"][0]["Tags"].append({
                        "Key": tag['key'],
                        "Value": tag['value']
                    })
        req.from_json_string(json.dumps(api_params))
        return req
    
    def create_cvm(self):
        req = self.get_request()
        print(f"创建cvm, 请求参数为: {req}")

        if subprocess.getoutput("c3mc-sys-ctl sys.bpm.fake.run") == "1":
            # bpm虚假运行
            print("创建cvm, 响应为: xxxxxx")
            print("LOG. instance_id:xxxxxx")
            print("VAR. instance_id:xxxxxx")
            print(f'VAR. extinstance_id:{self.params["account"]}.{self.params["region"]}.xxxxx')
        else:
            try:
                resp = self.client.RunInstances(req)

                print(f"创建cvm, 响应为: {resp.to_json_string()}")
                print(f"LOG. instance_id:{resp.InstanceIdSet[0]}")
                print(f"VAR. instance_id:{resp.InstanceIdSet[0]}")
                print(f'VAR. extinstance_id:{self.params["account"]}.{self.params["region"]}.{resp.InstanceIdSet[0]}')
            except Exception as e:
                print(f"创建腾讯云cvm出错, err: {e}", file=sys.stderr)
                exit(1)


def main(params):
    print(f"params = {json.dumps(params)}")

    account = params["account"]
    region = params["region"]

    key_info = json.loads(
        subprocess.getoutput(f"c3mc-get-account-info qcloud {account}")
    )
    Cvm(key_info["access_id"], key_info["access_key"], region, params).create_cvm()


if __name__ == '__main__':
    l = list(sys.stdin)
    if not l or len(l) > 1:
        raise type('WrongInputData', (Exception,), {})('数据格式不对, 需要一行json字符串"')

    main(json.loads(l[0]))
