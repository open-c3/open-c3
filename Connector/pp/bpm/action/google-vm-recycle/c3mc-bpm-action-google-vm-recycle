#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess

SUPPORTED_RECYCLE_TYPES = [
    "stop",
    "terminate"
]


class VmRecycler:
    def __init__(self, cred_path, region, zone, recycle_type):
        self.cred_path = cred_path
        self.region = region
        self.zone = zone
        self.recycle_type = recycle_type.lower()
        self.lib_client = self.create_lib_client()

    def create_lib_client(self):
        sys.path.append("/data/Software/mydan/Connector/lib/pp")
        from c3mc_cloud_google_compute import GoogleCompute
        return GoogleCompute(self.cred_path)

    def recycle_instance(self, instance_name):
        if self.recycle_type == "stop":
            self.lib_client.stop_vm(self.zone, instance_name)
        else:
            self.lib_client.delete_vm_with_related_resource(self.region, self.zone, instance_name)


def get_field_names():
    return subprocess.getoutput(
        "c3mc-cloud-get-real-field compute google-vm account name regionId zone"
    ).split()

def get_key_info(account):
    return json.loads(subprocess.getoutput(f"c3mc-get-account-info google {account}"))


def get_instance_uuid(instance_maybe_identifier):
    command = f"c3mc-device-find-uuid {instance_maybe_identifier}"
    result = subprocess.check_output(command, shell=True)
    return result.decode("utf-8").strip()

def get_resource_info(instance_identifier):
    instance_real_uuid = get_instance_uuid(instance_identifier)
    query_cmd = f"c3mc-device-cat curr compute google-vm {instance_real_uuid} | c3mc-base-tab2json"
    print(f"查询实例信息, uuid: {instance_real_uuid}, 查询命令: {query_cmd}")
    resource_info_str = subprocess.getoutput(query_cmd)
    if resource_info_str.strip() == "":
        return None
    return json.loads(resource_info_str.split("\n")[0])


def main(params):
    print("params = ", json.dumps(params))
    recycle_type = params["recycle_type"]

    if recycle_type not in SUPPORTED_RECYCLE_TYPES:
        raise RuntimeError(f'Unsupported recycle_type: {recycle_type}')

    account_field, name_field, region_id_field, zone_field = get_field_names()

    for instance_identifier in params["instance_ids"].split(","):
        instance_identifier = instance_identifier.strip()
        if instance_identifier == "":
            continue

        resource_info = get_resource_info(instance_identifier)
        key_info = get_key_info(resource_info[account_field])
        vm_recycler = VmRecycler(key_info["cred_path"], resource_info[region_id_field], resource_info[zone_field], recycle_type)

        if resource_info is None:
            continue

        vm_recycler.recycle_instance(resource_info[name_field])


if __name__ == '__main__':
    l = list(sys.stdin)
    if not l or len(l) > 1:
        raise type('WrongInputData', (Exception,), {})('数据格式不对, 需要一行json字符串"')

    main(json.loads(l[0]))
