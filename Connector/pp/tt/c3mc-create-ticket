#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import requests
import sys
import subprocess
import argparse
import re

sys.path.append("/data/Software/mydan/Connector/lib/pp")


def create_ticket(
    submit_user, 
    apply_user,
    title, 
    content, 
    email_list,
    ext_tt,
):
    impact = int(subprocess.getoutput("c3mc-sys-ctl sys.tt.impact"))
    c = int(subprocess.getoutput("c3mc-sys-ctl sys.tt.c"))
    t = int(subprocess.getoutput("c3mc-sys-ctl sys.tt.t"))
    i = int(subprocess.getoutput("c3mc-sys-ctl sys.tt.i"))

    API_ENDPOINT = "http://localhost:88/api/tt/public/ticket"

    header = {
        "Content-Type": "application/json",
    }

    if ext_tt == "1":
        API_ENDPOINT = subprocess.getoutput("c3mc-sys-ctl sys.tt.external_api_endpoint")
        if API_ENDPOINT == "":
            raise Exception("使用外部tt时, 外部tt的接口地址不允许为空")
        app_name = subprocess.getoutput("c3mc-sys-ctl sys.tt.external_api_endpoint.env.appname")
        app_key = subprocess.getoutput("c3mc-sys-ctl sys.tt.external_api_endpoint.env.appkey")
        if app_name != "" and app_key != "":
            header["appname"] = app_name
            header["appkey"] = app_key

    data = {
        "title": title,
        "content": content,
        "email_list": email_list,
        "impact": impact,
        "c": c,
        "t": t,
        "i": i,
        "submit_user": submit_user,
        "apply_user": apply_user
    }
    
    resp = requests.post(url = API_ENDPOINT, headers = header, json=data)

    from c3mc_utils import print_c3debug1_log
    print_c3debug1_log(
        "DEBUG1: {}, create_ticket, call tt. request: {}, response: {}".format(sys.argv[0], data, resp))

    return resp.json()


def main(    
    submit_user, 
    apply_user,
    title, 
    content, 
    email_list, 
    ext_tt,
):
    data = create_ticket(
        submit_user, 
        apply_user,
        title, 
        content, 
        email_list, 
        ext_tt,
    )
    if data["stat"] == 1:
        tt_number = data["data"]
        if not re.match(r"^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+)$", tt_number):
            print("tt单号不符合格式: {}".format(tt_number), file=sys.stderr)
            exit(1)
        print(tt_number)
    else:
        print(data["info"], file=sys.stderr)
        exit(1)


if __name__ == '__main__':
    content = []
    for line in sys.stdin:
        content.append(line)
    content = "<br />".join(content)

    parser = argparse.ArgumentParser(description="创建tt。工单内容请使用stdin输入参数, 其他参数使用命令行参数.")
    parser.add_argument('--title', type=str, required=True, help='标题')
    parser.add_argument('--email_list', type=str, required=False, help='邮箱列表,多个邮箱用英文逗号分隔')
    parser.add_argument('--submit_user', type=str, required=False, help='提交人账号')
    parser.add_argument('--apply_user', type=str, required=True, help='申请人账号')
    parser.add_argument('--ext_tt', type=str, required=False, help='是否使用外部tt, 1: 使用外部tt, 0: 使用内部tt')
    args = parser.parse_args()

    title = args.title
    apply_user = args.apply_user

    email_list = ""
    if args.email_list != None and args.email_list != "":
        email_list = args.email_list

    submit_user = "app@sys"
    if args.submit_user != None and args.submit_user != "":
        submit_user = args.submit_user

    ext_tt = "0"
    if args.ext_tt != None and args.ext_tt != "0":
        ext_tt = "1"

    main(
        submit_user, 
        apply_user,
        title, 
        content,
        email_list, 
        ext_tt
    )
