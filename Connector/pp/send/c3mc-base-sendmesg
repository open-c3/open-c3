#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib
use strict;
use warnings;

binmode STDIN,  ':utf8';
binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';

$|++;

use MYDB;
use MYDan::Util::OptConf;
use Encode;
use LWP::UserAgent;
use JSON;
use Configini;
use OPENC3::Crypt;
use File::Temp;

=head1 SYNOPSIS

 $0 user1 user2 ... user3

=cut

my $option = MYDan::Util::OptConf->load();
my %o      = $option->get()->dump();
$option->assert() unless @ARGV;

local $/ = undef;
my $mesg = Encode::encode('utf8', <STDIN> );
local $/ = "\n";

my ( $usermesg, %env );
$usermesg = Configini::get( 'usermesg'    );
%env      = Configini::env( 'usermesgenv' );

my $ua = LWP::UserAgent->new;
$ua->timeout( 15 );
$ua->default_header( %env ) if %env;

my $db = MYDB->new( "/data/Software/mydan/Connector/conf/conn", delayedconnection => 1 );
my $crypt = OPENC3::Crypt->new();

sub sendmesg
{
    my ( $user, $mesg ) = @_;

    if( $mesg =~ s/\nc3monitormsguuid:\[([a-zA-Z0-9][a-zA-Z0-9\-\.:]+[a-zA-Z0-9])\]// )
    {
        my $msgid = $1;
        my $caseid = (split /\./, $msgid)[0];
        my $time = time;
        my @acked = `c3mc-base-db-get id --table openc3_monitor_ack_active --filter "(uuid='$caseid' or uuid='$msgid' ) and type='P' and ( edit_user='$user' or edit_user='$user/email' or edit_user='$user/phone' ) and expire>$time"`;
        return if @acked;
    }

    if( $mesg =~ /\$\{c3tempusertoken\}/ )
    {
        my $token = `c3mc-base-user-temp-token --set '$user/phone'`;
        chomp $token;
        $mesg =~ s/\$\{c3tempusertoken\}/$token/g;
    }

    my $x = $db->query( sprintf "select `phone` from openc3_connector_useraddr where user='$user'" );
    $user = $crypt->decode( $x->[0][0] ) if @$x;

    my $err;
    for my $u ( split /,/, $user )
    {
        eval{ sendone( $u, $mesg ) };
        if( $@ )
        {
            warn "Warn send err: $@";
            $err = $@;
        }
    }

    die "Err: $err" if $err;

}

sub sendone
{
    my ( $user, $mesg ) = @_;
    return if $user eq 'x';
    if( $user =~ /^([a-z][a-z\-]*[a-z]):(.+)$/ )
    {
        my ( $extc, $extu ) = ( $1, $2 );
        my ( $TEMP, $tempfile ) = File::Temp::tempfile();
        print $TEMP $mesg;
        die "sendmesg-$extc fail: $!" if system "cat $tempfile|c3mc-base-sendmesg-$extc '$extu'";
        close $TEMP;
        return;
    }

    if( $usermesg =~ /api.connector.open-c3.org/ )
    {
        $mesg =~ s/'/"/g;
        $mesg = substr( $mesg, 0, 1000 ) if length $mesg > 1000;
        eval{ $db->execute( "insert into openc3_connector_usermesg (`user`,`mesg`) values('$user','$mesg')" )};
        die $@ if $@;
        return;
    }

    my $cont = $usermesg =~ /encode/
        ? JSON::to_json(     +{ user => $user, mesg => $mesg } )
        : JSON::encode_json( +{ user => $user, mesg => $mesg } );

    my ( $res, $err );
    for my $i ( reverse 1 .. 3 )
    {
        $res = $ua->post( $usermesg, Content => $cont, 'Content-Type' => 'application/json');

        $err = sprintf "send mesg fail: $usermesg: %s", YAML::XS::Dump $res;
        $err =~ s/appkey:\s+['"]?[a-zA-Z0-9]{32}['"]?\b/appkey: ******/g;

        last if $res->is_success;
        if( $i > 1 )
        {
            warn sprintf( "sendmesg code %s", $res->code );
            sleep 3;
        }
    }

    die sprintf( "%s: code %s", $err, $res->code ) unless $res->is_success;

    my $v = eval{JSON::decode_json $res->decoded_content};
    die "$err: data no JSON: $@" if $@;
    die $err unless $v->{stat};
}

map{ sendmesg( $_, $mesg ) }@ARGV;
