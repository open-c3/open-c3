#!/data/Software/mydan/perl/bin/perl
use strict;
use warnings;

$|++;

use MYDan::Util::OptConf;

=head1 SYNOPSIS

 $0 --tree open-c3.ops --date 2024-05
 $0 --uuid 1eb3bbdf-a5f6-42ce-bdde-9e9afbe1d311 --date 2024-05

 $0 --tree open-c3.ops --date 2024-05 --exclude

=cut

my $option = MYDan::Util::OptConf->load();
my %o = $option->get( qw( tree=s date=s uuid=s exclude ) )->dump();

$option->assert() unless $o{tree} || $o{uuid};
$option->assert() unless $o{date} && $o{date} =~ /^\d+\-\d+$/;

my ( %uuid, %name );

sub getuuid
{
    my $type = shift @_;
    my @xx = `c3mc-device-data-get curr $type`;
    chomp @xx;
    for my $xx ( @xx )
    {
        my @x = split /\t/, $xx;
        my ( $uuid ,$tree,  $name) = @x;
        next unless $tree =~ /$o{tree}/;
        $name{$name} ++ if $name;
        $uuid{$uuid} ++ if $uuid;
    }
}

my @device = (
    'compute huawei-ecs uuid 服务树 名称',
    'storage huawei-ecs-volume uuid 服务树',
    'storage huawei-obs uuid 服务树 名称',
    'database huawei-rds uuid 服务树 名称',
    'database huawei-redis uuid 服务树 名称',
    'networking huawei-elb uuid 服务树 名称',
    'storage huawei-kafka uuid 服务树 名称',
    'storage huawei-obs 名称 服务树 名称',
    'compute aws-ec2 uuid 服务树 名称',
    'networking aws-alb uuid 服务树 名称',
    'networking aws-nlb uuid 服务树 名称',
    'networking aws-eip uuid 服务树 NetworkInterfaceId',
    'storage aws-ec2-volume uuid 服务树 uuid',
    'storage aws-s3 uuid 服务树 名称',
    'database aws-dynamodb uuid 服务树 名称',
    'database aws-dynamodb uuid 服务树 名称',
);

map{ getuuid($_) }@device if $o{tree};
$uuid{$o{uuid}} ++ if $o{uuid};
$name{$o{uuid}} ++ if $o{uuid};

my ( $sum, %data, %out ) = ( 0 );
for my $file ( glob "/data/open-c3-data/c3mc-device-fee/$o{date}/*.csv" )
{
    print "file: $file\n";

    my    @data  = `cat '$file'|sed 's/Amazon Web Services, Inc/Amazon Web Services Inc/g'`;
    chomp @data;

    next unless @data > 1;

    my $title = shift @data;

    my @title = split /,/, $title;

    my @coluuid = ( "UUID", "资源ID", "lineItem/ResourceId" );
    my @colname = ( "NAME", "资源名称", "lineItem/ResourceId" );
    my @colcost = ( "Price", "Cost", "应付金额 (USD)", "lineItem/UnblendedCost" );

    my ( $coluuid ) = grep{ my $x = $_; grep{ $_ eq $x }@coluuid }@title;
    my ( $colname ) = grep{ my $x = $_; grep{ $_ eq $x }@colname }@title;
    my ( $colcost ) = grep{ my $x = $_; grep{ $_ eq $x }@colcost }@title;

    for my $data ( @data )
    {
         my @d = split /,/, $data;
         map{ $_ =~ s/^"*// and $_ =~ s/"*$// }@d;
         my %d = map{ $title[ $_ ] => $d[ $_ ] } 0 .. @title - 1;

        my @uuid = grep{ 0 == index( $d{$coluuid}, $_) || $d{$coluuid} =~ /\/$_\b/ }keys %uuid;
        my @name = grep{ 0 == index( $d{$colname}, $_) || $d{$colname} =~ /\/$_\b/ }keys %name;

        next if ( ( ! $o{exclude} ) && ( ! ( @name || @uuid )) ) || ( $o{exclude} && ( @name || @name ) );
        
        my $out = sprintf "%s\n", join "\t", map{ $d{$_}//''}( $coluuid, $colname, $colcost );
        $out{$out} = $d{$colcost};
        $sum += $d{$colcost};

    }
}

map{ print } sort{ $out{$a} <=> $out{$b}}keys %out;
printf "sum: %0.2f\n", $sum;
