#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/JOB/lib
use strict;
use warnings;
use MYDan::Util::OptConf;
use LWP::UserAgent;
use JSON;
use FindBin qw( $RealBin );
use MYDB;
use Util;
use uuid;
use kubernetes;

=head1 SYNOPSIS

 $0 deploy
 $0 check

=cut

my $option = MYDan::Util::OptConf->load();
$option->assert() unless @ARGV;

die "nonode" unless $ENV{NODE};

sub success
{
    map{ print "$_:ok\n"; } split /,/, $ENV{NODE};
    exit;
}

success() if $ARGV[2] && $ARGV[2] eq 'skip';

my ( $treeid, $flowid, $version ) = @ENV{qw( TREEID FLOWID VERSION )};

my %callenv = Util::envinfo( qw( appname appkey ) );
my $ua = LWP::UserAgent->new;
$ua->default_header( %callenv );

my $res = $ua->get( "http://api.ci.open-c3.org/project/$treeid/$flowid" );

die "get ci config fail:" . $res->content unless $res->is_success;

my $data = eval{ JSON::from_json $res->content };
die "get ci config fail: $@" if $@;
die "get ci config fail:" . $res->content unless $data && $data->{stat};

my %data = %{$data->{data}};


if( $ENV{NODE} =~ /^f(\d+)$/ )
{
    $flowid = $1;
    my $x = `c3mc-base-db-get groupid --table openc3_ci_project --filter "id=$flowid"`;
    chomp $x;
    die "get treeid fail" unless $x && $x =~ /^\d+$/;

    print "inherit-limit-check ...\n";
    die "limit." if system "c3mc-base-tree-inherit-limit-check -p '$treeid' -c '$x'";
    print "inherit-limit-check done ...\n";

    $treeid = $x;

    my $res = $ua->get( "http://api.ci.open-c3.org/project/$treeid/$flowid" );

    die "get ci config fail:" . $res->content unless $res->is_success;

    my $data = eval{ JSON::from_json $res->content };
    die "get ci config fail: $@" if $@;
    die "get ci config fail:" . $res->content unless $data && $data->{stat};

    map{ die "$_ of fx and f$flowid do not match:\n => $data{$_}\n => $data->{data}{$_}\n" if $data{$_} ne $data->{data}{$_} }qw( ci_type_repository addr );
    %data = %{$data->{data}};
}

print "treeid: $treeid flowid: $flowid\n";

if( $ENV{CONFIGPATH} && -f $ENV{CONFIGPATH} )
{
    my $config = eval{ YAML::XS::LoadFile $ENV{CONFIGPATH} };
    die "load config fail: $@" if $@;
    die "load yaml config fail" unless $config && ref $config eq 'HASH';

    map{ die "$_ nofind" unless $config->{$_}; }qw( name container );
    my %key = map{ $_ => 1 }qw( namespace name container );
    for my $key ( keys %$config )
    {
        die "unknown key in config" unless $key{$key};
        $data{"ci_type_$key"} = $config->{$key};
    }
}

map{ warn "$_: $data{$_}\n" ; }sort grep{ /ci_type/ && $_ !~ /dockerfile/ }keys %data;
warn "\n";

die "ci_type no kubernetes"           unless $data{ ci_type            } && $data{ ci_type            } eq 'kubernetes';
die "ci_type_ticketid format error"   unless $data{ ci_type_ticketid   } && $data{ ci_type_ticketid   } =~ /^\d+$/;
die "ci_type_kind format error"       unless $data{ ci_type_kind       } && $data{ ci_type_kind       } =~ /^[a-zA-Z0-9]+$/;
die "ci_type_namespace format error"  unless $data{ ci_type_namespace  } && $data{ ci_type_namespace  } =~ /^[a-zA-Z0-9\-]+$/;
die "ci_type_name format error"       unless $data{ ci_type_name       } && $data{ ci_type_name       } =~ /^[a-zA-Z0-9][a-zA-Z0-9_\-,]+$/;
die "ci_type_container format error"  unless $data{ ci_type_container  } && $data{ ci_type_container  } =~ /^[a-zA-Z0-9][a-zA-Z0-9_\-]+$/ || $data{ci_type_container} eq '__app_name__';
die "ci_type_repository format error" unless $data{ ci_type_repository } && $data{ ci_type_repository } =~ /^[0-9a-zA-Z][a-zA-Z0-9_\-\/\.:]+$/;


my $db = MYDB->new( "$RealBin/../../CI/conf/conn" );
my $kubectl = eval{ kubernetes::getKubectlCmd( $db, $data{ci_type_ticketid}, 'user', 'company',  0 ) };
die "get kubectl fail: $@" if $@;
undef $db;

my $check = sub{
    my $name = shift @_;
    my $stat = `$kubectl get '$data{ci_type_kind}' '$name' -n '$data{ci_type_namespace}' -o yaml`;
    my $conf = eval{ YAML::XS::Load $stat };
    my ( $containers, $status ) = ( $conf->{spec}{template}{spec}{containers}, $conf->{status} );
    
    my $containername = $data{ci_type_container} eq '__app_name__' ? $name : $data{ci_type_container};

    my ( $container ) = grep{ $_->{name} eq $containername }@$containers;
    unless( $container )
    {
        warn "no container name: $containername\n";
        return;
    }
    if( $container->{"image"} eq "$data{ci_type_repository}:$version" )
    {
        warn "image ok: $container->{image}\n";
    }
    else
    {
        warn "current: $container->{image} desired: $data{ci_type_repository}:$version\n";
        return;
    }

    if( $status->{unavailableReplicas} )
    {
        warn "status unavailableReplicas: $status->{unavailableReplicas}\n";
        return;
    }
    else { return 1; }
};

my $deploy = sub {
    my $name = shift @_;
    warn "update: $name\n";

    my $containername = $data{ci_type_container} eq '__app_name__' ? $name : $data{ci_type_container};
    warn "containername: $containername\n";

    die "update fail: $!" if system "$kubectl set image '$data{ci_type_kind}' '$name' '$containername=$data{ci_type_repository}:$version' -n '$data{ci_type_namespace}'";
    warn "setimage done.\n"
};

my $concurrent = $data{ci_type_concurrent};

$concurrent = 1 unless $concurrent && $concurrent =~ /^\d+$/;
warn "concurrent:$concurrent\n";

if( $ARGV[0] && $ARGV[0] eq 'deploy' )
{
    my %name = map{ $_ => 1 }split /,/, $data{ci_type_name};
    if( 1 == keys %name )
    {
       map{  &$deploy( $_ ); }keys %name;
    }
    else
    {
        my $timeout = $ENV{TIMEOUT} && $ENV{TIMEOUT} =~ /^\d+$/ ? time + $ENV{TIMEOUT} : time  +  60; 
        for( 1 .. 360 )
        {
            for my $name ( grep{ $name{$_} == 1 } keys %name )
            {
                last if $concurrent <= grep{ $name{$_} == 2 } keys %name;
                &$deploy( $name );
                $name{$name} = 2;
            }

            sleep 5;

            for my $name ( grep{ $name{$_} == 2 } keys %name )
            {
                delete $name{$name} if &$check( $name );
            }

            last unless keys %name;
            sleep 5;
            die "check timeout.\n" if time > $timeout;
        }
    }

}
elsif( $ARGV[0] && $ARGV[0] eq 'check' )
{
    my $timeout = $ENV{TIMEOUT} && $ENV{TIMEOUT} =~ /^\d+$/ ? time + $ENV{TIMEOUT} : time  +  60; 

    for my $name ( split /,/, $data{ci_type_name} )
    {
        warn "check: $name\n";
        for( 1 .. 360 )
        {
            last if &$check( $name );
            sleep 10;
            die "check timeout.\n" if time > $timeout;
        }
        warn "check done.\n";
    }
}
else { die "argv unknown"; }

success();
